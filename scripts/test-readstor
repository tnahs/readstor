#!/usr/bin/env zsh


# shellcheck disable=2296
NAME=$(basename "${(%):-%N}")

ROOT=${0:A:h:h}
DATA="$ROOT/data"
DATA_MACOS="$DATA/databases/books-annotated/"
DATA_IOS="$DATA/plists/books-annotated/"
TMP="$ROOT/.tmp/test-readstor"
RENDER="$TMP/render"
EXPORT="$TMP/export"
BACKUP="$TMP/backup"


function prepare_test {
    rm -rf "$TMP"
    mkdir -p "$TMP"
}


function render_macos {
    local output="$RENDER/macos"

    mkdir -p "$output"

    cargo run --                           \
        render                             \
            macos                          \
            --output-directory "$output"   \
            --data-directory "$DATA_MACOS" \
            --overwrite-existing           \
            --force                        \
                                           \
            --extract-tags                 \
            --normalize-whitespace         \
            --ascii-symbols                \
                                           \
            --trim-blocks                  \
            --wrap-text 100
}


function export_macos {
    local output="$EXPORT/macos"

    mkdir -p "$output"

    cargo run --                           \
        export                             \
            macos                          \
            --output-directory "$output"   \
            --data-directory "$DATA_MACOS" \
            --overwrite-existing           \
            --force                        \
                                           \
            --extract-tags                 \
            --normalize-whitespace         \
            --ascii-symbols
}


function backup_macos {
    local output="$BACKUP/macos"

    mkdir -p "$output"

    cargo run --                           \
        backup                             \
            macos                          \
            --output-directory "$output"   \
            --data-directory "$DATA_MACOS" \
            --force
}


function render_ios {
    local output="$RENDER/ios"

    mkdir -p "$output"

    cargo run --                         \
        render                           \
            ios                          \
            --output-directory "$output" \
            --data-directory "$DATA_IOS" \
            --overwrite-existing         \
            --force                      \
                                         \
            --extract-tags               \
            --normalize-whitespace       \
            --ascii-symbols              \
                                         \
            --trim-blocks                \
            --wrap-text 100
}


function export_ios {
    local output="$EXPORT/ios"

    mkdir -p "$output"

    cargo run --                         \
        export                           \
            ios                          \
            --output-directory "$output" \
            --data-directory "$DATA_IOS" \
            --overwrite-existing         \
            --force                      \
                                         \
            --extract-tags               \
            --normalize-whitespace       \
            --ascii-symbols
}


function backup_ios {
    local output="$BACKUP/ios"

    mkdir -p "$output"

    cargo run --                         \
        backup                           \
            ios                          \
            --output-directory "$output" \
            --data-directory "$DATA_IOS" \
            --force
}


function print_help {
    echo -e "Test run readstor.

\e[4mUsage:\e[0m ${NAME} [OPTIONS] <COMMAND>

\e[4mCommands:\e[0m
  all           Run all commands
  render-macos  Render macOS database data to default templates
  export-macos  Export macOS database data
  backup-macos  Back-up macOS database data
  render-ios    Render iOS plust data to default templates
  export-ios    Export iOS plist data
  backup-ios    Back-up iOS plist data

\e[4mOptions:\e[0m
  -h, --help   Show help"
}


function main {

    if [[ "$1" == "--help" || "$1" == "-h" ]]; then
        print_help
        exit 0
    fi

    if [[ $# -ne 1 ]]; then
        echo "Error: missing required positional argument 'command'"
        print_help
        exit 1
    fi

    case "$1" in
        "all")
            prepare_test        \
                && render_macos \
                && export_macos \
                && backup_macos \
                && render_ios   \
                && export_ios   \
                && backup_ios
            ;;
        "render-macos")
            prepare_test && render_macos
            ;;
        "export-macos")
            prepare_test && export_macos
            ;;
        "backup-macos")
            prepare_test && backup_macos
            ;;
        "render-ios")
            prepare_test && render_ios
            ;;
        "export-ios")
            prepare_test && export_ios
            ;;
        "backup-ios")
            prepare_test && backup_ios
            ;;
        *)
            echo "Error: invalid command '$1'"
            print_help
            exit 1
            ;;
    esac
}


main "$@"
